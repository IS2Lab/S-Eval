name: GitHub Clone Count Update Everyday

on:
  schedule:
    - cron: "0 */24 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: gh login
        run: echo "${{ secrets.SECRET_TOKEN }}" | gh auth login --with-token

      - name: parse latest clone count
        run: |
          curl --user "${{ github.actor }}:${{ secrets.SECRET_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/traffic/clones \
            > clone_now.json

      - name: create gist and download previous count
        id: set_id
        run: |
          if gh secret list | grep -q "GIST_ID"
          then
              echo "GIST_ID found"
              # echo ::set-output name=GIST::${{ secrets.GIST_ID }}
              echo "GIST=${{ secrets.GIST_ID }}" >> $GITHUB_OUTPUT
              curl https://gist.githubusercontent.com/${{ github.actor }}/${{ secrets.GIST_ID }}/raw/clone.json > clone_before.json
              if cat clone_before.json | grep '404: Not Found'; then
                echo "GIST_ID not valid anymore. Creating another gist..."
                gist_id=$(gh gist create clone.json | awk -F / '{print $NF}')
                echo $gist_id | gh secret set GIST_ID
                # echo ::set-output name=GIST::$gist_id
                echo "GIST=$gist_id" >> $GITHUB_OUTPUT
                cp clone_now.json clone_before.json
                git rm --ignore-unmatch  CLONE.md
              fi
          else
              echo "GIST_ID not found. Creating a gist..."
              cp clone_now.json clone.json
              gist_id=$(gh gist create clone.json | awk -F / '{print $NF}')
              echo $gist_id | gh secret set GIST_ID
              # echo ::set-output name=GIST::$gist_id
              echo "GIST=$gist_id" >> $GITHUB_OUTPUT
              cp clone_now.json clone_before.json
          fi

      - name: update clone.json
        run: |
          cp clone_before.json clone_latest.json
          echo "import json

          with open('clone_now.json', 'r') as fh:
              now = json.load(fh)
          
          with open('clone_before.json', 'r') as fh:
              before = json.load(fh)
          timestamps = {before['clones'][i]['timestamp']: i for i in range(len(before['clones']))}
          
          latest = dict(before)
          for i in range(len(now['clones'])):
              timestamp = now['clones'][i]['timestamp']
              if timestamp in timestamps:
                  if latest['clones'][timestamps[timestamp]]['count'] < now['clones'][i]['count']:
                      latest['clones'][timestamps[timestamp]] = now['clones'][i]
              else:
                  latest['clones'].append(now['clones'][i])
          
          
          latest['count'] = sum(map(lambda x: int(x['count']), latest['clones']))
          latest['uniques'] = sum(map(lambda x: int(x['uniques']), latest['clones']))
          
          if len(timestamps) > 100:
              remove_this = []
              clones = latest['clones']
              for i in range(len(timestamps) - 35):
                  clones[i]['timestamp'] = clones[i]['timestamp'][:7] 
                  if clones[i]['timestamp'] == clones[i+1]['timestamp'][:7]:
                      clones[i+1]['count'] +=  clones[i]['count']
                      clones[i+1]['uniques'] +=  clones[i]['uniques']
                      remove_this.append(clones[i])
          
              for item in remove_this:
                  clones.remove(item)
          
          with open('clone_latest.json', 'w', encoding='utf-8') as fh:
              json.dump(latest, fh, ensure_ascii=False, indent=4)" > clone_count.py
          python3 clone_count.py

      - name: Update gist with latest count
        run: |
          content=$(sed -e 's/\\/\\\\/g' -e 's/\t/\\t/g' -e 's/\"/\\"/g' -e 's/\r//g' "clone_latest.json" | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g')
          echo '{"description": "${{ github.repository }} clone statistics", "files": {"clone.json": {"content": "'"$content"'"}}}' > post_clone.json
          curl -s -X PATCH \
            --user "${{ github.actor }}:${{ secrets.SECRET_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @post_clone.json https://api.github.com/gists/${{ steps.set_id.outputs.GIST }} > /dev/null 2>&1

      # - name: Push
      #   uses: ad-m/github-push-action@main
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ github.ref }}
