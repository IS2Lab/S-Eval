name: GitHub Traffic Count Update Everyday

on:
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: gh login
        run: echo "${{ secrets.SECRET_TOKEN }}" | gh auth login --with-token

      - name: parse latest traffic count
        run: |
          curl --user "${{ github.actor }}:${{ secrets.SECRET_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/traffic/views \
            > traffic_now.json
      - name: create gist and download previous count
        id: set_id
        run: |
          if gh secret list | grep -q "TRAFFIC_ID"
          then
              echo "TRAFFIC_ID found"
              # echo ::set-output name=GIST::${{ secrets.TRAFFIC_ID }}
              echo "GIST=${{ secrets.TRAFFIC_ID }}" >> $GITHUB_OUTPUT
              curl https://gist.githubusercontent.com/${{ github.actor }}/${{ secrets.TRAFFIC_ID }}/raw/traffic.json > traffic_before.json
              if cat traffic_before.json | grep '404: Not Found'; then
                echo "TRAFFIC_ID not valid anymore. Creating another gist..."
                traffic_id=$(gh gist create traffic.json | awk -F / '{print $NF}')
                echo $traffic_id | gh secret set TRAFFIC_ID
                # echo ::set-output name=GIST::$traffic_id
                echo "GIST=$traffic_id" >> $GITHUB_OUTPUT
                cp traffic_now.json traffic_before.json
                # git rm --ignore-unmatch TRAFFIC.md
              fi
          else
              echo "TRAFFIC_ID not found. Creating a gist..."
              cp traffic_now.json traffic.json
              traffic_id=$(gh gist create traffic.json | awk -F / '{print $NF}')
              echo $traffic_id | gh secret set TRAFFIC_ID
              # echo ::set-output name=GIST::$traffic_id
              echo "GIST=$gist_id" >> $GITHUB_OUTPUT
              cp traffic_now.json traffic_before.json
          fi
      - name: update traffic.json
        run: |
          cp traffic_before.json traffic_latest.json
          # curl https://gist.github.com/IS2Lab/c0e98af9a3312be367faf6283719142e/raw/traffic.py > traffic.py
          echo "import json

          with open('traffic.json', 'r') as fh:
              now = json.load(fh)
          
          with open('traffic_before.json', 'r') as fh:
              before = json.load(fh)
          timestamps = {before['views'][i]['timestamp']: i for i in range(len(before['views']))}
          
          latest = dict(before)
          for i in range(len(now['views'])):
              timestamp = now['views'][i]['timestamp']
              if timestamp in timestamps:
                  latest['views'][timestamps[timestamp]] = now['views'][i]
              else:
                  latest['views'].append(now['views'][i])
          
          
          latest['count'] = sum(map(lambda x: int(x['count']), latest['views']))
          latest['uniques'] = sum(map(lambda x: int(x['uniques']), latest['views']))
          
          if len(timestamps) > 100:
              remove_this = []
              views = latest['views']
              for i in range(len(timestamps) - 35):
                  views[i]['timestamp'] = views[i]['timestamp'][:7] 
                  if views[i]['timestamp'] == views[i+1]['timestamp'][:7]:
                      views[i+1]['count'] +=  views[i]['count']
                      views[i+1]['uniques'] +=  views[i]['uniques']
                      remove_this.append(views[i])
          
              for item in remove_this:
                  views.remove(item)
          
          with open('traffic.json', 'w', encoding='utf-8') as fh:
              json.dump(latest, fh, ensure_ascii=False, indent=4)" > traffic.py
          python3 traffic.py
      - name: Update gist with latest count
        run: |
          content=$(sed -e 's/\\/\\\\/g' -e 's/\t/\\t/g' -e 's/\"/\\"/g' -e 's/\r//g' "traffic_latest.json" | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g')
          echo '{"description": "${{ github.repository }} traffic statistics", "files": {"traffic.json": {"content": "'"$content"'"}}}' > post_traffic.json
          curl -s -X PATCH \
            --user "${{ github.actor }}:${{ secrets.SECRET_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @post_traffic.json https://api.github.com/gists/${{ steps.set_id.outputs.GIST }} > /dev/null 2>&1
      #     if [ ! -f TRAFFIC.md ]; then
      #       shields="https://img.shields.io/badge/dynamic/json?color=success&label=Views&query=count&url="
      #       url="https://gist.githubusercontent.com/${{ github.actor }}/${{ steps.set_id.outputs.GIST }}/raw/traffic.json"
      #       repo="https://github.com/MShawon/github-clone-count-badge"
      #       echo ''> TRAFFIC.md
      #       echo '
      #       **Markdown**
      #       ```markdown' >> TRAFFIC.md
      #       echo "[![GitHub Traffic]($shields$url&logo=github)]($repo)" >> TRAFFIC.md
      #       echo '
      #       ```
      #       **HTML**
      #       ```html' >> TRAFFIC.md
      #       echo "<a href='$repo'><img alt='GitHub Traffic' src='$shields$url&logo=github'></a>" >> TRAFFIC.md
      #       echo '```' >> TRAFFIC.md
            
      #       git add TRAFFIC.md
      #       git config --global user.name "GitHub Action"
      #       git config --global user.email "action@github.com"
      #       git commit -m "create traffic count badge"
      #     fi
      # - name: Push
      #   uses: ad-m/github-push-action@main
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
